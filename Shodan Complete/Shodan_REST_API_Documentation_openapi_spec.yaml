openapi: 3.0.0
info:
  title: Shodan REST API Documentation
  description: "To use the API you need to have an API key, which you can get for\
    \ free by creating a Shodan account.  \n  \n[CREATE A SHODAN ACCOUNT](https://account.shodan.io/register)\n\
    \nThis documentation covers the raw APIs that are provided by Shodan, you should\
    \ only have to use this if no library is available in your language that wraps\
    \ the Shodan API in a developer-friendly way."
  version: 1.0.0
servers:
- url: https://api.shodan.io
components:
  securitySchemes:
    ApiKeyAuth:
      type: ApiKey
      in: query
      name: key
tags:
- name: Search Methods
- name: On-Demand Scanning
- name: Network Alerts
- name: Notifiers
- name: Directory Methods
- name: Bulk Data (Enterprise)
- name: Manage Organization (Enterprise)
- name: Account Methods
- name: DNS Methods
- name: Utility Methods
- name: API Status Methods
paths:
  /shodan/host/{ip}:
    get:
      operationId: hostInformation
      tags:
      - Search Methods
      summary: Host Information
      description: Returns all services that have been found on the given host IP.
      security:
      - ApiKeyAuth: []
      parameters:
      - name: history
        in: query
        schema:
          type: boolean
        description: 'True if all historical banners should be returned (default:
          False).'
        example: 'false'
      - name: minify
        in: query
        schema:
          type: boolean
        description: 'True to only return the list of ports and the general host information,
          no banners. (default: False).'
        example: 'false'
      - name: ip
        in: path
        schema:
          type: string
        required: true
        description: Host IP address
        example: 8.8.8.8
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                region_code: null
                ip: 134744072
                postal_code: null
                country_code: US
                city: null
                dma_code: null
                last_update: '2021-01-22T08:49:35.190817'
                latitude: 37.751
                tags: []
                area_code: null
                country_name: United States
                hostnames:
                - dns.google
                org: Google
                data:
                - _shodan:
                    id: cea5795b-55fd-4595-b9e5-ad5ca847cb4b
                    options: {}
                    ptr: true
                    module: dns-udp
                    crawler: ac284849be0745621b3c518f74c14cf43cafbf08
                  hash: -553166942
                  os: null
                  opts:
                    raw: 34ef818200010000000000000776657273696f6e0462696e640000100003
                  ip: 134744072
                  isp: Google
                  port: 53
                  hostnames:
                  - dns.google
                  location:
                    city: null
                    region_code: null
                    area_code: null
                    longitude: -97.822
                    country_code3: null
                    country_name: United States
                    postal_code: null
                    dma_code: null
                    country_code: US
                    latitude: 37.751
                  dns:
                    resolver_hostname: null
                    recursive: true
                    resolver_id: null
                    software: null
                  timestamp: '2021-01-22T08:49:35.190817'
                  domains:
                  - dns.google
                  org: Google
                  data: '

                    Recursion: enabled'
                  asn: AS15169
                  transport: udp
                  ip_str: 8.8.8.8
                asn: AS15169
                isp: Google
                longitude: -97.822
                country_code3: null
                domains:
                - dns.google
                ip_str: 8.8.8.8
                os: null
                ports:
                - 53
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                error: Invalid IP
  /shodan/host/count:
    get:
      operationId: searchHostCount
      tags:
      - Search Methods
      summary: Search Shodan without Results
      description: This method behaves identical to "/shodan/host/search" with the
        only difference that this method does not return any host results, it only
        returns the total number of results that matched the query and any facet information
        that was requested. As a result this method does not consume query credits.
      parameters:
      - name: query
        required: true
        in: query
        schema:
          type: string
        description: 'Shodan search query. The provided string is used to search the
          database of banners in Shodan, with the additional option to provide filters
          inside the search query using a "filter:value" format. For example, the
          following search query would find Apache Web servers located in Germany:
          "apache country:DE". [List of Filters](https://www.shodan.io/search/filters)'
        example: port:22
      - name: facets
        in: query
        schema:
          type: string
        description: 'A comma-separated list of properties to get summary information
          on. Property names can also be in the format of "property:count", where
          "count" is the number of facets that will be returned for a property (i.e.
          "country:100" to get the top 100 countries for a search query). Visit the
          Shodan website''s Facet Analysis page for an up-to-date list of available
          facets: [Explore Facets](https://beta.shodan.io/search/facet)'
        example: org,os
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                matches: []
                facets:
                  org:
                  - count: 3012386
                    value: Amazon.com
                  - count: 1322102
                    value: Google Cloud
                  - count: 1075807
                    value: Digital Ocean
                  - count: 687155
                    value: OVH SAS
                  - count: 450521
                    value: Tencent cloud computing
                  os:
                  - count: 601923
                    value: Ubuntu
                  - count: 227851
                    value: Debian
                  - count: 7660
                    value: Raspbian
                total: 19590274
      security:
      - ApiKeyAuth: []
  /shodan/host/search:
    get:
      operationId: searchHost
      tags:
      - Search Methods
      summary: Search Shodan
      description: 'Search Shodan using the same query syntax as the website and use
        facets to get summary information for different properties.


        ## **Requirements**


        This method may use API query credits depending on usage. If any of the following
        criteria are met, your account will be deducted 1 query credit:


        1. The search query contains a filter.

        2. Accessing results past the 1st page using the "page". For every 100 results
        past the 1st page 1 query credit is deducted.'
      parameters:
      - name: query
        required: true
        in: query
        schema:
          type: string
        description: 'Shodan search query. The provided string is used to search the
          database of banners in Shodan, with the additional option to provide filters
          inside the search query using a "filter:value" format. For example, the
          following search query would find Apache Web servers located in Germany:
          "apache country:DE".'
        example: port:22
      - name: facets
        in: query
        schema:
          type: string
        description: 'A comma-separated list of properties to get summary information
          on. Property names can also be in the format of "property:count", where
          "count" is the number of facets that will be returned for a property (i.e.
          "country:100" to get the top 100 countries for a search query). Visit the
          Shodan website''s Facet Analysis page for an up-to-date list of available
          facets:'
        example: org,os
      - name: page
        in: query
        schema:
          type: integer
        description: 'The page number to page through results 100 at a time (default:
          1)'
        example: '1'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                matches:
                - product: nginx
                  hash: -1609083510
                  ip: 1616761883
                  org: Comcast Business
                  isp: Comcast Business
                  transport: tcp
                  cpe:
                  - cpe:/a:igor_sysoev:nginx
                  data: "HTTP/1.1 400 Bad Request\r\nServer: nginx\r\nDate: Mon, 25\
                    \ Jan 2021 21:33:48 GMT\r\nContent-Type: text/html\r\nContent-Length:\
                    \ 650\r\nConnection: close\r\n\r\n"
                  asn: AS7922
                  port: 443
                  hostnames:
                  - three.webapplify.net
                  location:
                    city: Denver
                    region_code: CO
                    area_code: null
                    longitude: -104.9078
                    country_code3: null
                    latitude: 39.7301
                    postal_code: null
                    dma_code: 751
                    country_code: US
                    country_name: United States
                  timestamp: '2021-01-25T21:33:49.154513'
                  domains:
                  - webapplify.net
                  http:
                    robots_hash: null
                    redirects: []
                    securitytxt: null
                    title: 400 The plain HTTP request was sent to HTTPS port
                    sitemap_hash: null
                    robots: null
                    server: nginx
                    host: 96.93.212.27
                    html: "\r\n400 The plain HTTP request was sent to HTTPS port\r\
                      \n\r\n400 Bad Request\r\nThe plain HTTP request was sent to\
                      \ HTTPS port\r\nnginx\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
                    location: /
                    components: {}
                    securitytxt_hash: null
                    sitemap: null
                    html_hash: 199333125
                  os: null
                  _shodan:
                    crawler: c9b639b99e5410a46f656e1508a68f1e6e5d6f99
                    ptr: true
                    id: 534cc127-e734-44bc-be88-2e219a56a099
                    module: auto
                    options: {}
                  ip_str: 96.93.212.27
                - product: nginx
                  hostnames:
                  - kolobok.us
                  hash: 1940048442
                  ip: 3104568883
                  org: RuWeb
                  isp: RuWeb
                  transport: tcp
                  cpe:
                  - cpe:/a:igor_sysoev:nginx:1.4.2
                  data: "HTTP/1.1 410 Gone\r\nServer: nginx/1.4.2\r\nDate: Mon, 25\
                    \ Jan 2021 21:33:50 GMT\r\nContent-Type: text/html; charset=iso-8859-1\r\
                    \nContent-Length: 295\r\nConnection: keep-alive\r\n\r\n"
                  asn: AS49189
                  port: 80
                  version: 1.4.2
                  location:
                    city: null
                    region_code: null
                    area_code: null
                    longitude: 37.6068
                    country_code3: null
                    latitude: 55.7386
                    postal_code: null
                    dma_code: null
                    country_code: RU
                    country_name: Russia
                  timestamp: '2021-01-25T21:33:51.172037'
                  domains:
                  - kolobok.us
                  http:
                    robots_hash: null
                    redirects: []
                    securitytxt: null
                    title: 410 Gone
                    sitemap_hash: null
                    robots: null
                    server: nginx/1.4.2
                    host: 185.11.246.51
                    html: '


                      410 Gone


                      Gone

                      The requested resource/

                      is no longer available on this server and there is no forwarding
                      address.

                      Please remove all references to this resource.


                      '
                    location: /
                    components: {}
                    securitytxt_hash: null
                    sitemap: null
                    html_hash: 922034037
                  os: null
                  _shodan:
                    crawler: c9b639b99e5410a46f656e1508a68f1e6e5d6f99
                    ptr: true
                    id: 118b7360-01d0-4edb-8ee9-01e411c23e60
                    module: auto
                    options: {}
                  ip_str: 185.11.246.51
                facets:
                  country:
                  - count: 7883733
                    value: US
                  - count: 2964965
                    value: CN
                  - count: 1945369
                    value: DE
                  - count: 1717359
                    value: HK
                  - count: 940900
                    value: FR
                total: 23047224
      security:
      - ApiKeyAuth: []
  /shodan/host/search/facets:
    get:
      operationId: listSearchFacets
      tags:
      - Search Methods
      summary: List all search facets
      description: This method returns a list of facets that can be used to get a
        breakdown of the top values for a property.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
              - asn
              - bitcoin.ip
              - bitcoin.ip_count
              - '...'
      security:
      - ApiKeyAuth: []
  /shodan/host/search/filters:
    get:
      operationId: listSearchFilters
      tags:
      - Search Methods
      summary: List all filters that can be used when searching
      description: This method returns a list of search filters that can be used in
        the search query.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
              - all
              - asn
              - bitcoin.ip
              - bitcoin.ip_count
              - '...'
      security:
      - ApiKeyAuth: []
  /shodan/host/search/tokens:
    get:
      operationId: listSearchTokens
      tags:
      - Search Methods
      summary: Break the search query into tokens
      description: This method lets you determine which filters are being used by
        the query string and what parameters were provided to the filters.
      parameters:
      - name: query
        required: true
        in: query
        schema:
          type: string
        description: 'Shodan search query. The provided string is used to search the
          database of banners in Shodan, with the additional option to provide filters
          inside the search query using a "filter:value" format. For example, the
          following search query would find Apache Web servers located in Germany:
          "apache country:DE".'
        example: Raspbian port:22
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                attributes:
                  ports:
                  - 22
                errors: []
                string: Raspbian
                filters:
                - port
      security:
      - ApiKeyAuth: []
  /shodan/ports:
    get:
      operationId: listAllPorts
      tags:
      - On-Demand Scanning
      summary: List all ports that Shodan is crawling on the Internet.
      description: This method returns a list of port numbers that the crawlers are
        looking for.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
              - 7
              - 11
              - 13
              - 15
      security:
      - ApiKeyAuth: []
  /shodan/protocols:
    get:
      operationId: listAllProtocols
      tags:
      - On-Demand Scanning
      summary: List all protocols that can be used when performing on-demand Internet
        scans via Shodan
      description: This method returns an object containing all the protocols that
        can be used when launching an Internet scan.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                afp: AFP server information grabbing module
                ajp: Check whether the Tomcat server running AJP protocol
                amqp: Grab information from an AMQP service
      security:
      - ApiKeyAuth: []
  /shodan/scan:
    post:
      operationId: requestScan
      tags:
      - On-Demand Scanning
      summary: Request Shodan to crawl an IP/ netblock
      description: 'Use this method to request Shodan to crawl a network.


        ## **Requirements**


        This method uses API scan credits: 1 IP consumes 1 scan credit. You must have
        a paid API plan (either one-time payment or subscription) in order to use
        this method.'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ips:
                  type: number
                  description: '- A comma-separated list of IPs or netblocks (in CIDR
                    notation) that should get crawled.

                    - A list of services that should get scanned, where a service
                    is defined as a [port, protocol].'
                  example: 8.8.8.8,1.1.1.1
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Request Shodan to crawl an IP/ netblock
                  value:
                    count: 1
                    id: 3bPx0St3TvEHr24Y
                    credits_left: 100000
                example-1:
                  summary: Request Shodan to crawl an IP/ netblock
                  value:
                    count: 2
                    id: 0lFnrjdEWW05QvUQ
                    credits_left: 100000
      security:
      - ApiKeyAuth: []
  /shodan/scan/internet:
    post:
      operationId: scanInternet
      tags:
      - On-Demand Scanning
      summary: Crawl the Internet for a specific port and protocol using Shodan
      description: 'Use this method to request Shodan to crawl the Internet for a
        specific port.


        ## **Requirements**


        This method is restricted to security researchers and companies with a Shodan
        Enterprise Data license. To apply for access to this method as a researcher,
        please email [jmath@shodan.io](mailto:jmath@shodan.io) with information about
        your project. Access is restricted to prevent abuse.'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                port:
                  type: integer
                  description: The port that Shodan should crawl the Internet for
                  example: '80'
                protocol:
                  type: string
                  description: he name of the protocol that should be used to interrogate
                    the port. See /shodan/protocols for a list of supported protocols
                  example: http
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                id: DQdcm6QYgENbGj0R
      security:
      - ApiKeyAuth: []
  /shodan/scans:
    get:
      operationId: listScans
      tags:
      - On-Demand Scanning
      summary: Get list of all the created scans
      description: Returns a listing of all the on-demand scans that are currently
        active on the account.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                matches:
                - status: PROCESSING
                  created: '2021-01-26T08:17:43.794000'
                  status_check: '2021-01-26T08:17:43.900000'
                  credits_left: 100000
                  api_key: toH56DpDulOnvyxLhOSIxaUgZQeg1gFX
                  id: Mo8W7itcWumiy9Ay
                  size: 1
                - status: DONE
                  created: '2021-01-26T08:08:26.296000'
                  status_check: '2021-01-26T08:09:39.636000'
                  credits_left: 100000
                  api_key: toH56DpDulOnvyxLhOSIxaUgZQeg1gFX
                  id: 04GjMnUkQx9HsFhA
                  size: 1
                total: 19
      security:
      - ApiKeyAuth: []
  /shodan/scans/{id}:
    get:
      operationId: getScanStatus
      tags:
      - On-Demand Scanning
      summary: Get the status of a scan request
      description: 'Check the progress of a previously submitted scan request. Possible
        values for the status are:


        - SUBMITTING

        - QUEUE

        - PROCESSING

        - DONE'
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: The unique scan ID that was returned by /shodan/scan.
        example: DQdcm6QYgENbGj0R
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              example:
                count: 1
                status: DONE
                id: Mo8W7itcWumiy9Ay
                created: '2021-01-26T08:17:43.794000'
      security:
      - ApiKeyAuth: []
  /shodan/alert:
    post:
      operationId: createAlert
      tags:
      - Network Alerts
      summary: Create an alert to monitor a network range
      description: "Use this method to create a network alert for a defined IP/ netblock\
        \ which can be used to subscribe to changes/ events that are discovered within\
        \ that range.\n\n## **Parameters**\n\nThe alert is created by sending a JSON\
        \ encoded object that has the structure:\n\n``` json\n{\n    \"name\": {name},\n\
        \    \"filters\": {\n        \"ip\": {ip},\n    },\n    \"expires\": {expires},\n\
        }\n```\n\n- **name:** \\[String\\] The name to describe the network alert.\n\
        - **filters:** \\[Object\\] An object specifying the criteria that an alert\
        \ should trigger. The only supported option at the moment is the \"ip\" filter.\n\
        - **filters.ip:** \\[String\\] A list of IPs or network ranges defined using\
        \ CIDR notation.\n- **expires (optional):** \\[Integer\\] Number of seconds\
        \ that the alert should be active."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: DNS Alert
                filters:
                  ip:
                  - 8.8.8.8
                  - 1.1.1.1
                expires: 0
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                name: DNS Alert
                created: '2021-01-27T03:44:22.989575'
                triggers: {}
                has_triggers: false
                expires: 0
                expiration: null
                filters:
                  ip:
                  - 8.8.8.8
                  - 1.1.1.1
                id: OYPRB8IR9Z35AZPR
                size: 2
      security:
      - ApiKeyAuth: []
  /shodan/alert/{id}/info:
    get:
      operationId: getAlertInfo
      tags:
      - Network Alerts
      summary: Get the details for a network alert
      description: Returns the information about a specific network alert.
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: Alert ID
        example: 0DC55K0N2HHZS3D1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                name: DNS Alert
                created: '2021-01-27T03:50:24.277000'
                triggers: {}
                has_triggers: false
                expires: 0
                notify: {}
                expiration: null
                filters:
                  ip:
                  - 8.8.8.8
                  - 1.1.1.1
                notifiers: []
                id: 67UQ4JM3NGJKROR9
                size: 2
      security:
      - ApiKeyAuth: []
  /shodan/alert/{id}:
    delete:
      operationId: deleteAlert
      tags:
      - Network Alerts
      summary: Delete an alert
      description: Remove the specified network alert.
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: Alert ID
        example: AIW105ULY10RKIHX
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
      security:
      - ApiKeyAuth: []
    post:
      operationId: editAlert
      tags:
      - Network Alerts
      summary: Edit the networks monitored in an alert
      description: "Use this method to edit a network alert with a new list of IPs/\
        \ networks to keep track of.\n\n## **Parameters**\n\nThe alert is edited by\
        \ sending a JSON encoded object that has the structure:\n\n``` json\n{\n \
        \   \"filters\": {\n        \"ip\": {ip},\n    },\n}\n```\n\n- **filters:**\
        \ \\[Object\\] An object specifying the criteria that an alert should trigger.\
        \ The only supported option at the moment is the \"ip\" filter.\n- **filters.ip:**\
        \ \\[String\\] A list of IPs or network ranges defined using CIDR notation."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                filters:
                  ip:
                  - 8.8.8.8
                  - 1.1.1.1
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        example: 0DC55K0N2HHZS3D1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                name: DNS Alert
                created: '2021-01-27T03:44:22.989575'
                triggers: {}
                has_triggers: false
                expires: 0
                expiration: null
                filters:
                  ip:
                  - 8.8.8.8
                  - 1.1.1.1
                id: 67UQ4JM3NGJKROR9
                size: 2
      security:
      - ApiKeyAuth: []
  /shodan/alert/info:
    get:
      operationId: getAlertsInfo
      tags:
      - Network Alerts
      summary: Get a list of all the created alerts
      description: Returns a listing of all the network alerts that are currently
        active on the account.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
              - name: DNS Alert
                created: '2021-01-27T03:44:22.989000'
                triggers: {}
                has_triggers: false
                expires: 0
                notify: {}
                expiration: null
                filters:
                  ip:
                  - 8.8.8.8
                  - 1.1.1.1
                notifiers: []
                id: OYPRB8IR9Z35AZPR
                size: 2
              - name: Google DNS Alert
                created: '2021-01-27T03:42:50.908000'
                triggers: {}
                has_triggers: false
                expires: 0
                notify: {}
                expiration: null
                filters:
                  ip:
                  - 8.8.8.8
                notifiers: []
                id: RIO8WNQZMI4ZQXW6
                size: 1
      security:
      - ApiKeyAuth: []
  /shodan/alert/triggers:
    get:
      operationId: listTriggers
      tags:
      - Network Alerts
      summary: Get a list of available triggers
      description: Returns a list of all the triggers that can be enabled on network
        alerts.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
              - name: any
                rule: '*'
                description: Match any service that is discovered
              - name: industrial_control_system
                rule: tag:ics
                description: Services associated with industrial control systems
              - name: malware
                rule: tag:compromised,malware
                description: Compromised or malware-related services
              - name: uncommon
                rule: -port:22,80,443,7547
                description: Services that generally shouldn't be publicly available
      security:
      - ApiKeyAuth: []
  /shodan/alert/{id}/trigger/{trigger}:
    put:
      operationId: enableTrigger
      tags:
      - Network Alerts
      summary: Enable a trigger
      description: Get notifications when the specified trigger is met.
      requestBody:
        content: {}
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: Alert ID
        example: 0DC55K0N2HHZS3D1
      - name: trigger
        in: path
        schema:
          type: string
        required: true
        description: Comma-separated list of trigger names
        example: open_database,iot
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
      security:
      - ApiKeyAuth: []
    delete:
      operationId: disableTrigger
      tags:
      - Network Alerts
      summary: Disable a trigger
      description: Stop getting notifications for the specified trigger.
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: Alert ID
        example: 0DC55K0N2HHZS3D1
      - name: trigger
        in: path
        schema:
          type: string
        required: true
        description: Comma-separated list of trigger names
        example: open_database,iot
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
      security:
      - ApiKeyAuth: []
  /shodan/alert/{id}/trigger/{trigger}/ignore/{service}:
    put:
      operationId: addToWhitelist
      tags:
      - Network Alerts
      summary: Add to Whitelist
      description: Ignore the specified service when it is matched for the trigger.
      requestBody:
        content: {}
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: Alert ID
        example: 0DC55K0N2HHZS3D1
      - name: trigger
        in: path
        schema:
          type: string
        required: true
        description: Comma-separated list of trigger names
        example: open_database,iot
      - name: service
        in: path
        schema:
          type: number
        required: true
        description: Service specified in the format "ip:port" (ex. "1.1.1.1:80")
        example: 1.1.1.1:53
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
      security:
      - ApiKeyAuth: []
    delete:
      operationId: removeFromWhitelist
      tags:
      - Network Alerts
      summary: Remove from Whitelist
      description: Start getting notifications again for the specified trigger.
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: Alert ID
        example: G20GRU32X1R6AYTB
      - name: trigger
        in: path
        schema:
          type: string
        required: true
        description: Comma-separated list of trigger names
        example: open_database,iot
      - name: service
        in: path
        schema:
          type: number
        required: true
        description: Service specified in the format "ip:port" (ex. "1.1.1.1:80")
        example: 1.1.1.1:53
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      security:
      - ApiKeyAuth: []
  /shodan/alert/{id}/notifier/{notifier_id}:
    put:
      operationId: addNotifier
      tags:
      - Network Alerts
      summary: Add the notifier to the alert
      description: Add the specified notifier to the network alert. Notifications
        are only sent if triggers have also been enabled. For each created user, there
        is a **default** notifier which will sent via email.
      requestBody:
        content: {}
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: Alert ID
        example: G20GRU32X1R6AYTB
      - name: notifier_id
        in: path
        schema:
          type: string
        required: true
        description: Notifier ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
      security:
      - ApiKeyAuth: []
    delete:
      operationId: removeNotifier
      tags:
      - Network Alerts
      summary: Remove the notifier from the alert
      description: Remove the notification service from the alert. Notifications are
        only sent if triggers have also been enabled.
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: Alert ID
        example: G20GRU32X1R6AYTB
      - name: notifier_id
        in: path
        schema:
          type: string
        required: true
        description: Notifier ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
      security:
      - ApiKeyAuth: []
  /notifier:
    get:
      operationId: listNotifiers
      tags:
      - Notifiers
      summary: List all user-created notifiers
      description: Get a list of all the notifiers that the user has created.
      parameters: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                matches:
                - description: null
                  args:
                    to: jmath@shodan.io
                  provider: email
                  id: default
                total: 2
      security:
      - ApiKeyAuth: []
    post:
      operationId: createNotifier
      tags:
      - Notifiers
      summary: Create a new notification service for the user
      description: Use this method to create a new notification service endpoint that
        Shodan services can send notifications through.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                provider:
                  type: string
                  description: Provider name as returned by /notifier/provider
                  example: email
                description:
                  type: string
                  description: Description of the notifier
                  example: Email
                to:
                  type: string
                  description: Arguments required by the provider
                  example: email@shodan.io
      parameters: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                id: 1VxiaJb93Gn8TUnM
                success: true
      security:
      - ApiKeyAuth: []
  /notifier/provider:
    get:
      operationId: listProviders
      tags:
      - Notifiers
      summary: List of available notification providers
      description: Get a list of all the notification providers that are available
        and the parameters to submit when creating them.
      parameters: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                pagerduty:
                  required:
                  - routing_key
                slack:
                  required:
                  - webhook_url
                telegram:
                  required:
                  - chat_id
                  - token
                webhook:
                  required:
                  - url
                phone:
                  required:
                  - to
                email:
                  required:
                  - to
                gitter:
                  required:
                  - room_id
                  - token
      security:
      - ApiKeyAuth: []
  /notifier/{id}:
    delete:
      operationId: deleteNotifier
      tags:
      - Notifiers
      summary: Delete a notification service
      description: Remove the notification service created for the user.
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: Notifier ID
        example: XEmmdaPJxE1kknJq
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
      security:
      - ApiKeyAuth: []
    get:
      operationId: getNotifierInfo
      tags:
      - Notifiers
      summary: Get information about a notifier
      description: Use this method to create a new notification service endpoint that
        Shodan services can send notifications through.
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: Notifier ID
        example: kLlNZVxaBKRQkcsl
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                description: Email notifier
                args:
                  to: jmath@shodan.io
                provider: email
                id: 1VxiaJb93Gn8TUnM
      security:
      - ApiKeyAuth: []
    put:
      operationId: editNotifier
      tags:
      - Notifiers
      summary: Edit a notifier
      description: Use this method to update the parameters of a notifier.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                to:
                  type: string
                  description: Arguments required by the provider
                  example: email@shodan.io
      parameters:
      - name: id
        in: path
        schema:
          type: string
        required: true
        description: Notifier ID
        example: XEmmdaPJxE1kknJq
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                id: 1VxiaJb93Gn8TUnM
                success: true
      security:
      - ApiKeyAuth: []
  /shodan/query:
    get:
      operationId: listQueries
      tags:
      - Directory Methods
      summary: List the saved search queries
      description: Use this method to obtain a list of search queries that users have
        saved in Shodan.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                matches:
                - votes: 1
                  description: Danieverton
                  tags:
                  - ''
                  timestamp: '2021-01-26T19:41:50.961000'
                  title: ip camera
                  query: ip camera BR
                - votes: 3
                  description: 'This is Moxa Nport Devices ICS system with Authentication
                    disabled Author: A1C3VENOM'
                  tags:
                  - ics
                  - iot
                  - moxa
                  timestamp: '2021-01-24T07:44:08.889000'
                  title: Moxa Nport Devices with Authentication disabled
                  query: '"Moxa Nport Device" Status: Authentication disabled port:"4800"'
                total: 6746
      security:
      - ApiKeyAuth: []
  /shodan/query/search:
    get:
      operationId: searchQueries
      tags:
      - Directory Methods
      summary: Search the directory of saved search queries
      description: Use this method to search the directory of search queries that
        users have saved in Shodan.
      parameters:
      - name: query
        required: true
        in: query
        schema:
          type: string
        description: What to search for in the directory of saved search queries
        example: webcam
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                matches:
                - votes: 2
                  description: ''
                  title: Webcam
                  timestamp: '2019-07-07T02:54:45.194000'
                  tags:
                  - ''
                  query: 'IP Webcam has_screenshot: -port:3269 -port:3288 -port:7000
                    -port:7001 -port:8000 country:"KR"'
                - votes: 3
                  description: ''
                  title: webcam
                  timestamp: '2020-10-08T14:54:14.599000'
                  tags:
                  - ''
                  query: Test org:"Test"
                total: 309
      security:
      - ApiKeyAuth: []
  /shodan/query/tags:
    get:
      operationId: listQueryTags
      tags:
      - Directory Methods
      summary: List the most popular tags
      description: Use this method to obtain a list of popular tags for the saved
        search queries in Shodan.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                matches:
                - count: 209
                  value: webcam
                - count: 172
                  value: cam
                - count: 159
                  value: camera
                total: 7580
      security:
      - ApiKeyAuth: []
  /shodan/data:
    get:
      operationId: listDatasets
      tags:
      - Bulk Data (Enterprise)
      summary: Get a list of available datasets
      description: Use this method to see a list of the datasets that are available
        for download.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
              - scope: monthly
                name: internetdb
                description: Minified database containing network information about
                  all IPs on the Internet
              - scope: monthly
                name: dnsdb
                description: DNS data for active domains on the Internet
              - scope: daily
                name: raw-daily
                description: Data files containing all the information collected during
                  a day
      security:
      - ApiKeyAuth: []
  /shodan/data/{dataset}:
    get:
      operationId: listFiles
      tags:
      - Bulk Data (Enterprise)
      summary: List the files for a dataset
      description: Get a list of files that are available for download from the provided
        dataset.
      parameters:
      - name: dataset
        in: path
        schema:
          type: string
        required: true
        description: Name of the dataset
        example: raw-daily
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
              - url: https://...
                timestamp: 1611711401000
                sha1: 5a91f49c90da5ab8856c83c84846941115c55441
                name: 2021-01-26.json.gz
                size: 104650655998
              - url: https://...
                timestamp: 1611655444000
                sha1: ea29acc25fc154ac64dde0ab294824ae7f1f64c9
                name: 2021-01-25.json.gz
                size: 152517565458
              - url: https://...
                timestamp: 1611540775000
                sha1: aed18f2a952df7731fec447d81ead8a96907000d
                name: 2021-01-24.json.gz
                size: 161275556509
      security:
      - ApiKeyAuth: []
  /org:
    get:
      operationId: getOrganization
      tags:
      - Manage Organization (Enterprise)
      summary: General Information
      description: Get information about your organization such as the list of its
        members, upgrades, authorized domains and more.
      parameters: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                name: Shodan Organization
                created: '2020-09-30T15:41:48.073000'
                admins:
                - username: admin
                  email: admin@shodan.io
                members:
                - username: member
                  email: member@shodan.io
                upgrade_type: stream-100
                domains:
                - shodan.io
                logo: false
                id: p3cEAmoDapAPeP7w
      security:
      - ApiKeyAuth: []
  /org/member/{user}:
    put:
      operationId: addMember
      tags:
      - Manage Organization (Enterprise)
      summary: Add a new member
      description: Add a Shodan user to the organization and upgrade them.
      requestBody:
        content: {}
      parameters:
      - name: notify
        in: query
        schema:
          type: boolean
        description: Whether or not to send an email notification
        example: 'false'
      - name: user
        in: path
        schema:
          type: string
        required: true
        description: Username or email of the Shodan user
        example: new-member@shodan.io
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
      security:
      - ApiKeyAuth: []
    delete:
      operationId: removeMember
      tags:
      - Manage Organization (Enterprise)
      summary: Remove a member
      description: Remove and downgrade the provided member from the organization.
      parameters:
      - name: user
        in: path
        schema:
          type: string
        required: true
        description: Username or email of the Shodan user
        example: new-member@shodan.io
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
      security:
      - ApiKeyAuth: []
  /account/profile:
    get:
      operationId: getProfile
      tags:
      - Account Methods
      summary: Account Methods
      description: Returns information about the Shodan account linked to this API
        key.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                member: true
                credits: 0
                display_name: null
                created: '2020-06-15T10:44:43.148000'
      security:
      - ApiKeyAuth: []
  /dns/domain/{domain}:
    get:
      operationId: getDomainInfo
      tags:
      - DNS Methods
      summary: Domain Information
      description: Get all the subdomains and other DNS entries for the given domain.
        Uses 1 query credit per lookup.
      parameters:
      - name: domain
        in: path
        schema:
          type: string
        required: true
        description: Domain name to lookup; example "cnn.com"
        example: google.com
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                domain: google.com
                tags:
                - ipv6
                data:
                - subdomain: ''
                  type: MX
                  value: aspmx.l.google.com
                  last_seen: '2021-01-19T22:23:15.978799+00:00'
                - subdomain: '*.auth.corp'
                  type: CNAME
                  value: uberproxy.l.google.com
                  last_seen: '2021-01-26T13:04:34.018114+00:00'
                - subdomain: '*.cloud.sandbox'
                  type: A
                  value: 74.125.142.81
                  last_seen: '2021-01-15T12:57:18.133727+00:00'
                subdomains:
                - '*.auth.corp'
                - '*.cloud.sandbox'
                - '*.composer-staging.cloud'
                more: true
      security:
      - ApiKeyAuth: []
  /dns/resolve:
    get:
      operationId: resolveDNS
      tags:
      - DNS Methods
      summary: DNS Lookup
      description: Look up the IP address for the provided list of hostnames.
      parameters:
      - name: hostnames
        in: query
        schema:
          type: string
        description: Comma-separated list of hostnames; example "google.com,bing.com"
        example: google.com,facebook.com
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                facebook.com: 31.13.93.35
                google.com: 142.251.32.174
      security:
      - ApiKeyAuth: []
  /dns/reverse:
    get:
      operationId: reverseDNS
      tags:
      - DNS Methods
      summary: Reverse DNS Lookup
      description: Look up the hostnames that have been defined for the given list
        of IP addresses.
      parameters:
      - name: ips
        in: query
        schema:
          type: number
        description: Comma-separated list of IP addresses; example "74.125.227.230,204.79.197.200"
        example: 8.8.8.8,1.1.1.1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                8.8.8.8:
                - dns.google
                1.1.1.1:
                - one.one.one.one
      security:
      - ApiKeyAuth: []
  /tools/httpheaders:
    get:
      operationId: getHTTPHeaders
      tags:
      - Utility Methods
      summary: HTTP Headers
      description: Shows the HTTP headers that your client sends when connecting to
        a webserver.
      parameters: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                Content-Length: ''
                Cf-Visitor: '{"scheme":"https"}'
                Accept-Encoding: gzip
                X-Forwarded-For: 113.161.57.41
                Host: api.shodan.io
                Cf-Request-Id: 07e880ae180000d1cfb309a000000001
                User-Agent: curl/7.64.1
                Connection: Keep-Alive
                X-Forwarded-Proto: https
                Accept: '*/*'
                Cdn-Loop: cloudflare
                Cf-Connecting-Ip: 113.161.57.41
                Cf-Ray: 61876a29cdf8d1cf-DFW
                Content-Type: ''
      security:
      - ApiKeyAuth: []
  /tools/myip:
    get:
      operationId: getMyIP
      tags:
      - Utility Methods
      summary: My IP Address
      description: Get your current IP address as seen from the Internet.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example: 113.161.57.41
      security:
      - ApiKeyAuth: []
  /api-info:
    get:
      operationId: getAPIInfo
      tags:
      - API Status Methods
      summary: API Plan Information
      description: Returns information about the API plan belonging to the given API
        key.
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                scan_credits: 100000
                usage_limits:
                  scan_credits: -1
                  query_credits: -1
                  monitored_ips: -1
                plan: stream-100
                https: false
                unlocked: true
                query_credits: 100000
                monitored_ips: 19
                unlocked_left: 100000
                telnet: false
      security:
      - ApiKeyAuth: []
